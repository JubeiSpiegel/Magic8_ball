using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Magic8Ball
{
    // This Class is in charge of the internal functionality of the Magic 8 Ball
    class Answers
    {
        //First step is to create a string array with 20 elements. Every item is a string value with its content.
        public static string[] possibleAnswers = new string[20]
                            { "It is certain.",             //00
                            "It is decidedly so.",          //01
                            "Without a doubt.",             //02
                            "Yes - definitely.",            //03
                            "You may rely on it.",          //04
                            "As I see it, yes.",            //05
                            "Most likely.",                 //06
                            "Outlook good.",                //07
                            "Yes.",                         //08
                            "Signs point to yes.",          //09
                            "Reply hazy, try again.",       //10
                            "Ask again later.",             //11
                            "Better not tell you now.",     //12
                            "Cannot predict now.",          //13
                            "Concentrate and ask again.",   //14
                            "Don't count on it.",           //15
                            "My reply is no.",              //16
                            "My sources say no.",           //17
                            "Outlook not so good.",         //18
                            "Very doubtful."                //19
                            };

        //After that all the internal functionality is here in this class
        public static void AnswersMethod()
        {
            //Creation of three lists to save all values generated by the Random.Next geneator
            List<int> PositiveAnswers = new List<int>();
            List<int> NotCommitalAnswers = new List<int>();
            List<int> NegativeAnswers = new List<int>();

            //Integer variables to show the values of the count of each List of the statics
            int positive;
            int notCommital;
            int negative;

            //do-while for having the app all the time running except if the user inputs "N/n" on the question
            char charChoice;
            bool choice;

            //generator of random numbers
            Random randomNumber = new Random();
            do
            {
                //variable answer stores all the random possible choices between 0 and 19 (as our string)
                int answer;
                answer = randomNumber.Next(0, 20);

                //this saves the counter of the static list every iteration
                positive = PositiveAnswers.Count;
                notCommital = NotCommitalAnswers.Count;
                negative = NegativeAnswers.Count;

                //if-else logic to show green, yellow or red colour depending on the random generated
                if ((answer >= 0) && (answer <= 9))
                {
                    PositiveAnswers.Add(answer);
                    Console.ForegroundColor = ConsoleColor.Green;
                }
                if ((answer >= 10) && (answer <= 14))
                {
                    NotCommitalAnswers.Add(answer);
                    Console.ForegroundColor = ConsoleColor.Yellow;
                }
                if ((answer >= 15) && (answer <= 19))
                {
                    NegativeAnswers.Add(answer);
                    Console.ForegroundColor = ConsoleColor.Red;
                }

                //Display output with the string element from the array corresponding to the index generated stored in "answer"
                Console.WriteLine("");
                Console.WriteLine("==============");
                Console.WriteLine("The ball says: \'{0}\'", possibleAnswers[answer]);
                Console.WriteLine("==============");

                //iteration question
                Console.ForegroundColor = ConsoleColor.Cyan;
                Console.Write("Do you want to repeat? [Y/N]: ");
                charChoice = char.Parse(Console.ReadLine().ToUpper());
                Console.Clear();

                //if "Y/y", keep playing 
                if (charChoice == 'Y')
                {
                    choice = true;
                }
                //if "N/n", happy to finish and show statics stored in variables from the list
                else if (charChoice == 'N')
                {
                    choice = false;
                    Console.WriteLine("");
                    Console.WriteLine("*************************");
                    Console.WriteLine("Thanks for using this app");
                    Console.WriteLine("*************************");
                    Console.WriteLine("");
                    Console.ForegroundColor = ConsoleColor.Green;
                    Console.WriteLine("Summary Count:\t {0} positive answers", positive);
                    Console.ForegroundColor = ConsoleColor.Yellow;
                    Console.WriteLine("Summary Count:\t {0} positive answers", notCommital);
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("Summary Count:\t {0} positive answers", negative);
                    Console.WriteLine("");
                }
                //else options answered on Y/N, wrong choice and keep playing
                else
                {
                    choice = true;
                    Console.WriteLine("****************************************************");
                    Console.WriteLine("***ERROR***: Wrong Choice, please select YES or NO");
                    Console.WriteLine("****************************************************");
                }

            } while (choice == true);


        }

    }
}
